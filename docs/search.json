[{"path":"https://fbertran.github.io/peperr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christine Porzelius. Author. Harald Binder. Author. Frederic Bertrand. Maintainer.","code":""},{"path":"https://fbertran.github.io/peperr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Christine Porzelius, Harald Binder Frederic Bertrand (2025). Parallelised Estimation Prediction Error, R package version 1.6. doi:10.32614/CRAN.package.peperr.","code":"@Manual{,   title = {Parallelised Estimation of Prediction Error},   author = {Christine Porzelius and Harald Binder and Frederic Bertrand},   year = {2025},   note = {R package version 1.6},   url = {https://github.com/fbertran/peperr},   doi = {10.32614/CRAN.package.peperr}, }"},{"path":[]},{"path":[]},{"path":"https://fbertran.github.io/peperr/index.html","id":"maintainer-f-bertrand","dir":"","previous_headings":"","what":"Maintainer F. Bertrand","title":"Parallelised Estimation of Prediction Error","text":"https://doi.org/10.32614/CRAN.package.peperr peperr designed prediction error estimation resampling techniques, possibly accelerated parallel execution compute cluster. Newly developed model fitting routines can easily incorporated. Methods used package detailed Porzelius Ch., Binder H. Schumacher M. (2009) 10.1093/bioinformatics/btp062 used, instance, Porzelius Ch., Schumacher M.Binder H. (2011) 10.1007/s00180-011-0236-6.","code":""},{"path":"https://fbertran.github.io/peperr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parallelised Estimation of Prediction Error","text":"can install released version peperr CRAN : development version GitHub :","code":"install.packages(\"peperr\") install.packages(\"devtools\") devtools::install_github(\"fbertran/peperr\")"},{"path":"https://fbertran.github.io/peperr/reference/PLL.coxph.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictive partial log-likelihood for Cox poportional hazards model — PLL.coxph","title":"Predictive partial log-likelihood for Cox poportional hazards model — PLL.coxph","text":"Extracts predictive partial log-likelihood coxph model fit.","code":""},{"path":"https://fbertran.github.io/peperr/reference/PLL.coxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictive partial log-likelihood for Cox poportional hazards model — PLL.coxph","text":"","code":"# S3 method for class 'coxph' PLL(object, newdata, newtime, newstatus, complexity, ...)"},{"path":"https://fbertran.github.io/peperr/reference/PLL.coxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictive partial log-likelihood for Cox poportional hazards model — PLL.coxph","text":"object fitted model class coxph. newdata n_new*p matrix covariates. newtime n_new-vector censored survival times. newstatus n_new-vector survival status, coded 0 .1 complexity used. ... additional arguments, used.","code":""},{"path":"https://fbertran.github.io/peperr/reference/PLL.coxph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictive partial log-likelihood for Cox poportional hazards model — PLL.coxph","text":"Used function peperr, function fit.coxph used model fit.","code":""},{"path":"https://fbertran.github.io/peperr/reference/PLL.coxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictive partial log-likelihood for Cox poportional hazards model — PLL.coxph","text":"Vector length n_new","code":""},{"path":"https://fbertran.github.io/peperr/reference/PLL.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function for extracting the predictive partial log-likelihood — PLL","title":"Generic function for extracting the predictive partial log-likelihood — PLL","text":"Generic function extracting th predictive partial log-likelihood fitted survival model.","code":""},{"path":"https://fbertran.github.io/peperr/reference/PLL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function for extracting the predictive partial log-likelihood — PLL","text":"","code":"PLL(object, newdata, newtime, newstatus, ...)"},{"path":"https://fbertran.github.io/peperr/reference/PLL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function for extracting the predictive partial log-likelihood — PLL","text":"object fitted model class class. newdata n_new*p matrix covariates. newtime n_new-vector censored survival times. newstatus n_new-vector event status, coded 0 censoring 1, event occurred. ... additional arguments, example complexity value, necessary.","code":""},{"path":"https://fbertran.github.io/peperr/reference/PLL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function for extracting the predictive partial log-likelihood — PLL","text":"predictive partial log-likelihood measures prediction performance model fitted boostrap sample, using data sample. Multiplying (-2) leads deviance-like measure, means small values indicate good prediction performance. peperr requires function PLL.class case survival response, model fit class class. time, PLL.CoxBoost available.","code":""},{"path":"https://fbertran.github.io/peperr/reference/PLL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function for extracting the predictive partial log-likelihood — PLL","text":"Vector length n_new","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.brier.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the Brier score for a fitted model — aggregation.brier","title":"Determine the Brier score for a fitted model — aggregation.brier","text":"Evaluate Brier score, .e. prediction error, fitted model new data. used argument aggregation.fun peperr call.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.brier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the Brier score for a fitted model — aggregation.brier","text":"","code":"aggregation.brier(full.data=NULL, response, x, model, cplx=NULL,   type=c(\"apparent\", \"noinf\"), fullsample.attr = NULL, ...)"},{"path":"https://fbertran.github.io/peperr/reference/aggregation.brier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the Brier score for a fitted model — aggregation.brier","text":"full.data passed peperr, used calculation Brier score. response vector binary response. x n*p matrix covariates. model model fitted returned fit.fun, used call peperr. cplx passed peperr, necessary calculation Brier score. type character. fullsample.attr passed peperr, necessary calculation Brier score. ... additional arguments, passed predict function.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.brier.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the Brier score for a fitted model — aggregation.brier","text":"empirical Brier score mean squared difference risk prediction true value observations takes values 0 1, small values indicate good prediction performance risk prediction model.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.brier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the Brier score for a fitted model — aggregation.brier","text":"Scalar, indicating empirical Brier score.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.misclass.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the missclassification rate for a fitted model — aggregation.misclass","title":"Determine the missclassification rate for a fitted model — aggregation.misclass","text":"Evaluate misclassification rate, .e. prediction error, fitted model new data. use argument aggregation.fun peperr call.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.misclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the missclassification rate for a fitted model — aggregation.misclass","text":"","code":"aggregation.misclass(full.data=NULL, response, x, model, cplx=NULL,   type=c(\"apparent\", \"noinf\"), fullsample.attr = NULL, ...)"},{"path":"https://fbertran.github.io/peperr/reference/aggregation.misclass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the missclassification rate for a fitted model — aggregation.misclass","text":"full.data passed peperr, used calculation misclassification rate. response vector binary response. x n*p matrix covariates. model model fitted fit.fun. cplx passed peperr, necessary calculation misclassification rate. type character. fullsample.attr passed peperr, necessary calculation misclassification rate. ... additional arguments, passed predict function.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.misclass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the missclassification rate for a fitted model — aggregation.misclass","text":"Misclassification rate ratio observations prediction response wrong.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.misclass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the missclassification rate for a fitted model — aggregation.misclass","text":"Scalar, indicating misclassification rate.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.pmpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the prediction error curve for a fitted model — aggregation.pmpec","title":"Determine the prediction error curve for a fitted model — aggregation.pmpec","text":"Interface pmpec, conforming structure required argument aggregation.fun peperr call. Evaluates prediction error curve, .e. Brier score tracked time, fitted survival model.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.pmpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the prediction error curve for a fitted model — aggregation.pmpec","text":"","code":"aggregation.pmpec(full.data, response, x, model, cplx=NULL, times = NULL,     type=c(\"apparent\", \"noinf\"), fullsample.attr = NULL, ...)"},{"path":"https://fbertran.github.io/peperr/reference/aggregation.pmpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the prediction error curve for a fitted model — aggregation.pmpec","text":"full.data data frame full data set. response Either survival object (Surv(time, status), time n-vector censored survival times status n-vector containing event status, coded 0 1) matrix columns time containing survival times status containing integers, 0 indicates censoring, 1 interesting event larger numbers competing risks. x n*p matrix covariates. model survival model returned fit.fun used call peperr. cplx numeric, number boosting steps list, containing number boosting steps argument stepno. times vector evaluation time points. given, used well calculation full apparent -information error resampling procedure. used fullsample.attr specified. type character. fullsample.attr vector evaluation time points, passed resampling procedure. Either user-defined, times passed args.aggregation, determined time points aggregation.fun call full data set. ... additional arguments passed pmpec call.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.pmpec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the prediction error curve for a fitted model — aggregation.pmpec","text":"evaluation time points passed, generated using uncensored time points number smaller 100, 100 time points 95% quantile uncensored time points taken. pmpec requires predictProb method class fitted model, .e. model class class predictProb.class.","code":""},{"path":"https://fbertran.github.io/peperr/reference/aggregation.pmpec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the prediction error curve for a fitted model — aggregation.pmpec","text":"matrix one row. column represents estimated prediction error fit time points.","code":""},{"path":[]},{"path":"https://fbertran.github.io/peperr/reference/complexity.LASSO.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface for selection of optimal parameter for lasso fit — complexity.LASSO","title":"Interface for selection of optimal parameter for lasso fit — complexity.LASSO","text":"Determines optimal value tuning parameter lambda regression model lasso penalties via cross-validation. Conforming calling convention required argument complexity peperr call.","code":""},{"path":"https://fbertran.github.io/peperr/reference/complexity.LASSO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface for selection of optimal parameter for lasso fit — complexity.LASSO","text":"","code":"complexity.LASSO(response, x, full.data, ...)"},{"path":"https://fbertran.github.io/peperr/reference/complexity.LASSO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface for selection of optimal parameter for lasso fit — complexity.LASSO","text":"response survival object (Surv(time, status)). x n*p matrix covariates. full.data data frame containing response covariates full data set. ... additional arguments passed optL1 package penalized call.","code":""},{"path":"https://fbertran.github.io/peperr/reference/complexity.LASSO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface for selection of optimal parameter for lasso fit — complexity.LASSO","text":"Scalar value giving optimal value lambda.","code":""},{"path":"https://fbertran.github.io/peperr/reference/complexity.LASSO.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interface for selection of optimal parameter for lasso fit — complexity.LASSO","text":"Function basically wrapper around optL1 package penalized.  Calling peperr, default arguments optL1 can changed passing named list containing argument args.complexity.","code":""},{"path":[]},{"path":"https://fbertran.github.io/peperr/reference/extract.fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract functions, libraries and global variables to be loaded onto a compute cluster — extract.fun","title":"Extract functions, libraries and global variables to be loaded onto a compute cluster — extract.fun","text":"Automatic extraction functions, libraries global variables employed passed functions. Designed peperr call, see Details section .","code":""},{"path":"https://fbertran.github.io/peperr/reference/extract.fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract functions, libraries and global variables to be loaded onto a compute cluster — extract.fun","text":"","code":"extract.fun(funs = NULL)"},{"path":"https://fbertran.github.io/peperr/reference/extract.fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract functions, libraries and global variables to be loaded onto a compute cluster — extract.fun","text":"funs list function names.","code":""},{"path":"https://fbertran.github.io/peperr/reference/extract.fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract functions, libraries and global variables to be loaded onto a compute cluster — extract.fun","text":"list containing packages vector containing quoted names libraries functions vector containing quoted names functions variables vector containing quoted names global variables","code":""},{"path":"https://fbertran.github.io/peperr/reference/extract.fun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract functions, libraries and global variables to be loaded onto a compute cluster — extract.fun","text":"function necessary compute cluster situations computation nodes required functions, libraries variables loaded explicitly node. Avoids loading whole global environment might include unnecessary loading huge data sets. might problems cases, especially able extract library function namespace. Similarly, can extract required library loaded, function contains require library call.","code":""},{"path":[]},{"path":"https://fbertran.github.io/peperr/reference/extract.fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract functions, libraries and global variables to be loaded onto a compute cluster — extract.fun","text":"","code":"# 1. Simplified example for illustration if (FALSE) { # \\dontrun{ library(CoxBoost) a <- function(){ # some calculation }  b<-function(){ # some other calculation x <- cv.CoxBoost() # z is global variable y <- a(z) }  # list with packages, functions and variables required for b: extract.fun(list(b))  # 2. As called by default in peperr example extract.fun(list(fit.CoxBoost, aggregation.pmpec)) } # }"},{"path":"https://fbertran.github.io/peperr/reference/fit.LASSO.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface function for fitting a generalised linear model with the lasso — fit.LASSO","title":"Interface function for fitting a generalised linear model with the lasso — fit.LASSO","text":"Interface fitting survival models lasso, conforming requirements argument fit.fun peperr call.","code":""},{"path":"https://fbertran.github.io/peperr/reference/fit.LASSO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface function for fitting a generalised linear model with the lasso — fit.LASSO","text":"","code":"fit.LASSO(response, x, cplx, ...)"},{"path":"https://fbertran.github.io/peperr/reference/fit.LASSO.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface function for fitting a generalised linear model with the lasso — fit.LASSO","text":"response response. numeric vector linear regression, Surv object Cox regression binary vector logistic regression. x n*p matrix covariates. cplx LASSO penalty. lambda1 penalized call. ... additional arguments passed penalized call.","code":""},{"path":"https://fbertran.github.io/peperr/reference/fit.LASSO.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface function for fitting a generalised linear model with the lasso — fit.LASSO","text":"penfit object","code":""},{"path":"https://fbertran.github.io/peperr/reference/fit.LASSO.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interface function for fitting a generalised linear model with the lasso — fit.LASSO","text":"Function basically wrapper around function penalized package penalized.","code":""},{"path":[]},{"path":"https://fbertran.github.io/peperr/reference/fit.coxph.html","id":null,"dir":"Reference","previous_headings":"","what":"Interface function for fitting a Cox proportional hazards model — fit.coxph","title":"Interface function for fitting a Cox proportional hazards model — fit.coxph","text":"Interface fitting survival models Cox proporional hazards model, conforming requirements argument fit.fun peperr call.","code":""},{"path":"https://fbertran.github.io/peperr/reference/fit.coxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interface function for fitting a Cox proportional hazards model — fit.coxph","text":"","code":"fit.coxph(response, x, cplx, ...)"},{"path":"https://fbertran.github.io/peperr/reference/fit.coxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interface function for fitting a Cox proportional hazards model — fit.coxph","text":"response survival object (Surv(time, status)). x n*p matrix covariates. cplx used. ... additional arguments passed coxph call.","code":""},{"path":"https://fbertran.github.io/peperr/reference/fit.coxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interface function for fitting a Cox proportional hazards model — fit.coxph","text":"CoxBoost object","code":""},{"path":"https://fbertran.github.io/peperr/reference/fit.coxph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interface function for fitting a Cox proportional hazards model — fit.coxph","text":"Function basically wrapper around coxph package survival.","code":""},{"path":[]},{"path":"https://fbertran.github.io/peperr/reference/ipec.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrated prediction error curve — ipec","title":"Integrated prediction error curve — ipec","text":"Summary measures prediction error curves","code":""},{"path":"https://fbertran.github.io/peperr/reference/ipec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrated prediction error curve — ipec","text":"","code":"ipec(pe, eval.times, type=c(\"Riemann\", \"Lebesgue\", \"relativeLebesgue\"), response=NULL)"},{"path":"https://fbertran.github.io/peperr/reference/ipec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrated prediction error curve — ipec","text":"pe prediction error different time points. Vector length eval.times matrix (columns correspond evaluation time points, rows different prediction error estimates) eval.times evalutation time points type type integration. 'Riemann' estimates Riemann integral, 'Lebesgue' uses probability density weights, 'relativeLebesgue' delivers difference null model (using weights 'Lebesgue'). response survival object (Surv(time, status)), required type 'Lebesgue' 'relativeLebesgue'","code":""},{"path":"https://fbertran.github.io/peperr/reference/ipec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrated prediction error curve — ipec","text":"ipec Value integrated prediction error curve. Integer vector, pe vector matrix, respectively, .e. one entry per row passed matrix.","code":""},{"path":"https://fbertran.github.io/peperr/reference/ipec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Integrated prediction error curve — ipec","text":"survival data, prediction error evaluation time point can extracted peperr object function perr. summary measure can obtained via intgrating time. Note time points used evaluation stored list element attribute peperr object.","code":""},{"path":[]},{"path":"https://fbertran.github.io/peperr/reference/ipec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integrated prediction error curve — ipec","text":"","code":"if (FALSE) { # \\dontrun{ n <- 200 p <- 100 beta <- c(rep(1,10),rep(0,p-10)) x <- matrix(rnorm(n*p),n,p) real.time <- -(log(runif(n)))/(10*exp(drop(x %*% beta))) cens.time <- rexp(n,rate=1/10) status <- ifelse(real.time <= cens.time,1,0) time <- ifelse(real.time <= cens.time,real.time,cens.time)  # Example: # Obtain prediction error estimate fitting a Cox proportional hazards model # using CoxBoost  # through 10 bootstrap samples  # with fixed complexity 50 and 75 # and aggregate using prediction error curves peperr.object <- peperr(response=Surv(time, status), x=x,     fit.fun=fit.CoxBoost, complexity=c(50, 75),     indices=resample.indices(n=length(time), method=\"sub632\", sample.n=10)) # 632+ estimate for both complexity values at each time point prederr <- perr(peperr.object) # Integrated prediction error curve for both complexity values ipec(prederr, eval.times=peperr.object$attribute, response=Surv(time, status)) } # }"},{"path":"https://fbertran.github.io/peperr/reference/peperr.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallelised Estimation of Prediction Error — peperr","title":"Parallelised Estimation of Prediction Error — peperr","text":"Prediction error estimation regression models via resampling techniques. Potentially parallelised, compute cluster available.","code":""},{"path":"https://fbertran.github.io/peperr/reference/peperr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallelised Estimation of Prediction Error — peperr","text":"","code":"peperr(response, x,    indices = NULL,    fit.fun, complexity = NULL, args.fit = NULL, args.complexity = NULL,   parallel = NULL, cpus = 2, clustertype=NULL, clusterhosts=NULL,   noclusterstart = FALSE, noclusterstop=FALSE,   aggregation.fun=NULL, args.aggregation = NULL,    load.list = extract.fun(list(fit.fun, complexity, aggregation.fun)),   load.vars = NULL, load.all = FALSE,    trace = FALSE, debug = FALSE,   peperr.lib.loc=NULL,          RNG=c(\"RNGstream\", \"SPRNG\", \"fixed\", \"none\"), seed=NULL,          lb=FALSE, sr=FALSE, sr.name=\"default\", sr.restore=FALSE)"},{"path":"https://fbertran.github.io/peperr/reference/peperr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallelised Estimation of Prediction Error — peperr","text":"response Either survival object (Surv(time, status), time n-vector censored survival times status n-vector containing event status, coded 0 1) matrix columns time containing survival times status containing integers, 0 indicates censoring, 1 interesting event larger numbers competing risks. case binary response, vector entries 0 1. x n*p matrix covariates. indices named list, two elements (expected lists) sample.index, containing vector indices observations used fit model, list ..sample, containing vector indices observations used assessment. One list entry per split. Function resample.indices provides common resampling methods. argument indices specified (default), indices determined follows: number observations passed data matrix smaller number covariates, 500 bootstrap samples without replacement generated (\"subsampling\"), else 500 bootstrap samples replacement. fit.fun function returning fitted model, see Details. complexity choice complexity parameter necessary, example number boosting steps boosting techniques, function returning complexity parameter model fitted fit.fun, see Details. Alternatively, one explicit value complexity vector values can passed. latter case, model fit carried complexity parameters. Alternatively, named list can passed, complexity tuple different parameter values. args.fit named list arguments passed function given fit.fun. args.complexity complexity function, named list arguments passed function. parallel default setting corresponds case sfCluster used R runs sequential, .e. without parallelisation. sfCluster used, settings sfCluster commandline call taken, .e. required number nodes specified option sfCluster call (using argument cpus). another cluster solution (specified argument clustertype) shall used, cluster cpus CPUs started parallel=TRUE. parallel=FALSE switches back sequential execution. See Details. cpus number nodes, .e., number parallel running R processes, set cluster, specified commandline call. needed parallel=TRUE. clustertype type cluster, character. 'SOCK' socket cluster, 'MPI', 'PVM' 'NWS'. considered parallel=TRUE. , socket cluster, require additional installation, started default. clusterhosts host list socket NWS clusters, parallel=TRUE. specified using one machine. noclusterstart function used already parallelised code. set TRUE, cluster initialised even compute cluster available function works sequential mode. Additionally usable calls slaves executed calling function peperr, example load data slaves, see Details. noclusterstop TRUE, cluster stop suppressed. Useful debugging sessions slaves. Note next peperr call forces cluster stop, except called noclusterstart=TRUE. aggregation.fun function evaluates prediction error model fitted function given fit.fun, see Details. specified, function aggregation.pmpec taken response survival object, case binary response function aggregation.brier. args.aggregation named list arguments passed function given argument aggregation.fun. load.list named list element packages, functions variables containing quoted names libraries, functions global variables required computation cluster nodes. default extracts automatically libraries, functions global variables , potentially user-defined, functions fit.fun, complexity aggregation.fun, see function extract.fun. Can set NULL, e.g. libraries, functions variables needed. Alternatively, use argument load.. See Details. load.vars named list global variables required computation cluster nodes. See Details. Relict, global variabels can now passed list element variables argument load.list. load.logical. set TRUE, variables, functions libraries current global environment loaded cluster nodes. See Details. trace logical. TRUE, output current execution step printed (running parallel: printed nodes, means visible master R process, see Details). debug TRUE, information concerning export variables given. peperr.lib.loc location package peperr standard library search path (.libPaths()), specified loading peperr onto cluster nodes. RNG type RNG. \"fixed\" requires specified seed. \"RNGstream\" \"SPRNG\" use default seeds, specified. See Details. seed seed allow reproducibility results. considered argument RNG \"none\". See Details. lb TRUE compute cluster used, computation slaves executed load balanced. See Details. sr TRUE, intermediate results saved. execution interrupted, can restored setting argument sr.restore TRUE. See documentation package snowfall details sr.name sr set TRUE one computation runs simultaneously, unique names need used. sr.restore sr set TRUE, interrupted computation restarted.","code":""},{"path":"https://fbertran.github.io/peperr/reference/peperr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallelised Estimation of Prediction Error — peperr","text":"Validation new model fitting approaches requires proper use resampling techniques prediction error estimation. Especially high-dimensional data situations computational demand might huge. peperr accelerates computation automatically parallelisation resampling procedure, compute cluster available. noticeable speed-reached even using dual-core processor. Resampling based prediction error estimation requires split training test data following steps: ) selection model complexity (desired), using training data set, b) fitting model selected (given) complexity training set c) measurement prediction error corresponding test set. Functions fitting model, determination model complexity, required fitting procedure, aggregating prediction error passed arguments fit.fun, complexity aggregation.fun. Already available functions model fit: fit.CoxBoost, fit.coxph, fit.LASSO, fit.rsf_mtry determine complexity: complexity.mincv.CoxBoost, complexity.ipec.CoxBoost, complexity.LASSO, complexity.ipec.rsf_mtry aggregate prediction error: aggregation.pmpec, aggregation.brier, aggregation.misclass Function peperr especially designed evaluation newly developed model fitting routines. , routines can passed arguments peperr call. incorporated follows (also compare existing functions, named ): Model fitting techniques, require selection one complexity parameters, often provide routines based cross-validation similar determine parameter. routine already hand, complexity function needed peperr call wrapper around , consists providing data required way, calling routine return selected complexity value(s). given model fitting routine fitting function, passed peperr call argument fit.fun, wrapper around . Explicitly, response matrix covariates transformed required form, necessary, routine called passed complexity value, required, fitted prediction model returned. Prediction error estimated using fitted model data set, kind comparison true predicted response values. case survival response, apparent error (type apparent), means prediction error estimated data set used model fitting, -information error (type noinf), calculates prediction error permuted data, provided. Note aggregation function returns error additional attribute called addattr. evaluation time points stored allow later access. case survival response, user may additionally provide function partial log likelihood calculation, uses function model fit, called PLL.class. prediction error curves used aggregation (aggregation.pmpec), predictProb method provided, .e. model class class predictProb.class, see . Concerning parallelisation, three possibilities run peperr: Start R commandline sfCluster preferred options, example number cpus. Leave three arguments parallel, clustertype nodes unchanged. Use cluster solution supported snowfall, .e. LAM/MPI, socket, PVM, NWS (set argument clustertype). Argument parallel set TRUE number cpus can chosen argument nodes) cluster used, R works sequentially. Keep parallel=NULL. parallelisation takes place therefore speed can obtained. general, parallel=NULL, information concerning cluster set-taken commandline, else, can specified using three arguments parallel, clustertype, nodes, , necessary, clusterhosts. sfCluster Unix tool flexible comfortable managment parallel R processes. However, peperr usable cluster solution supported snowfall, .e. sfCluster installed use package peperr. Note may require cluster handling user, e.g. manually shut 'lamhalt' commandline type=\"MPI\". , using socket cluster (argument parallel=TRUE clustertype=\"SOCK\"), require extra installation. Note run time speed anymore number nodes chosen higher number passed training/test samples plus one, parallelisation takes place resampling procedure one additional run used computation full sample. running sequential mode, specified number R processes called nodes spawned parallel execution resampling procedure (see ). requires provide variables, functions libraries necessary computation R processes, explicitly variables, functions libraries required , potentially user-defined, functions fit.fun, complexity aggregation.fun. simplest possibility load whole content global environment node loaded libraries. done setting argument load.=TRUE. default, huge amount data potentially loaded node unnecessarily. Function extract.fun provided extract functions libraries needed, automatically called call function peperr. Note required libraries located standard library search path (obtained .libPaths()). Another alternative load required data manually slaves, using snowfall functions sfLibrary, sfExport sfExportAll. , argument noclusterstart switched TRUE. Additionally, argument load.list set NULL, avoid potentially overwriting functions variables loaded cluster nodes automatically. Note set.seed call calling function peperr sufficient allow reproducibility results running parallel mode, slave R processes affected R instances. peperr provides two possibilities make results reproducible: Use RNG=\"RNGstream\" RNG=\"SPRNG\". Independent parallel random number streams initialized cluster nodes, using function sfClusterSetupRNG package snowfall. seed can specified using argument seed, else default values taken. set.seed call master required additionally argument lb=FALSE, see . RNG=\"fixed\", seed specified. can either integer vector length number samples +2.  second case, first entry used main R process, next number samples ones sample run (parallel execution mode slave R processes) last one computation full sample (well slave R process parallel execution mode). Passing integer x equivalent passing vector x+(0:(number samples+1)). procedure allows reproducibility case, .e. also number parallel processes changes well sequential execution. Load balancing (argument lb) means, slave gets new job immediately previous finished. speeds computation, may change order jobs. Due , results reproducible, RNG=\"fixed\" used.","code":""},{"path":"https://fbertran.github.io/peperr/reference/peperr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallelised Estimation of Prediction Error — peperr","text":"Object class peperr indices list resampling indices. complexity passed complexity. argument complexity specified, 0. selected.complexity selected complexity full data set, complexity passed function. Else equal value complexity. response passed response. full.model.fit List, one entry per complexity value. Fitted model full data set passed fit.fun. full.apparent full apparent error full data set. Matrix: One row per complexity value. case survival response, columns correspond evaluation timepoints, returned value attribute. noinf.error information error full data set, . e. evaluation permuted data. Matrix: One row per complexity value. Columns correspond evaluation timepoints, returned attribute. attribute response survival: Evaluation time points. Passed args.aggregation automatically determined aggregation function. Otherwise, available, extra attribute returned aggregation function, else NULL, see Details. sample.error list. entry contains matrix prediction error one resampling test sample. One row per complexity value. sample.complexity vector complexity values. Equals value complexity, complexity value passed explicitly, otherwise function complexity selected complexity value resampling sample. argument complexity specified, 0. sample.lipec , response survival. Lebesgue integrated prediction error curve sample. List one entry per sample, matrix one row per complexity value. sample.pll , response survival PLL.class function available. Predictive partial log likelihood sample. List one entry per sample, matrix one row per complexity value. null.model.fit , response survival binary. Fit null model, .e. fit without information covariates. case survival response Kaplan-Meier, else logistic regression model. null.model , response survival binary. Vector scalar: Prediction error null model, case survival response evaluation time point. sample.null.model list. Prediction error null model one resampling test sample. Matrix, one row per complexity value.","code":""},{"path":"https://fbertran.github.io/peperr/reference/peperr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parallelised Estimation of Prediction Error — peperr","text":"Binder, H. Schumacher, M. (2008) Adapting prediction error estimates biased complexity selection high-dimensional bootstrap samples. Statistical Applications Genetics Molecular Biology, 7:1. Porzelius, C., Binder, H., Schumacher, M. (2008) Parallelised prediction error estimation evaluation high-dimensional models. Manuscript.","code":""},{"path":"https://fbertran.github.io/peperr/reference/peperr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parallelised Estimation of Prediction Error — peperr","text":"Christine Porzelius cp@fdm.uni-freiburg.de, Harald Binder","code":""},{"path":[]},{"path":"https://fbertran.github.io/peperr/reference/peperr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallelised Estimation of Prediction Error — peperr","text":"","code":"# Generate survival data with 10 informative covariates n <- 200 p <- 100 beta <- c(rep(1,10),rep(0,p-10)) x <- matrix(rnorm(n*p),n,p) real.time <- -(log(runif(n)))/(10*exp(drop(x %*% beta))) cens.time <- rexp(n,rate=1/10) status <- ifelse(real.time <= cens.time,1,0) time <- ifelse(real.time <= cens.time,real.time,cens.time)  if (FALSE) { # \\dontrun{ # A: R runs sequential or R is started on commandline with desired options  # (for example using sfCluster: sfCluster -i --cpus=5) # Example A1: # Obtain prediction error estimate fitting a Cox proportional hazards model # using CoxBoost  # through 10 bootstrap samples  # with fixed complexity 50 and 75 # and aggregate using prediction error curves (default setting)  peperr.object1 <- peperr(response=Surv(time, status), x=x,     fit.fun=fit.CoxBoost, complexity=c(50, 75),     indices=resample.indices(n=length(time), method=\"sub632\", sample.n=10)) peperr.object1  # Diagnostic plots plot(peperr.object1)  # Extraction of prediction error curves (.632+ prediction error estimate),  # blue line corresponds to complexity 50,  # red one to complexity 75 plot(peperr.object1$attribute,    perr(peperr.object1)[1,], type=\"l\", col=\"blue\",    xlab=\"Evaluation time points\", ylab=\"Prediction error\") lines(peperr.object1$attribute,     perr(peperr.object1)[2,], col=\"red\")  # Example A2: # As Example A1, but # with complexity selected through a cross-validation procedure # and extra argument 'penalty' passed to fit function and complexity function peperr.object2 <- peperr(response=Surv(time, status), x=x,     fit.fun=fit.CoxBoost, args.fit=list(penalty=100),    complexity=complexity.mincv.CoxBoost, args.complexity=list(penalty=100),    indices=resample.indices(n=length(time), method=\"sub632\", sample.n=10),    trace=TRUE) peperr.object2  # Diagnostic plots plot(peperr.object2)  # Example A3: # As Example A2, but # with extra argument 'times', specifying the evaluation times passed to aggregation.fun # and seed, for reproducibility of results # Note: set.seed() is required additional to argument 'seed',  # as function 'resample.indices' is used in peperr call. set.seed(123) peperr.object3 <- peperr(response=Surv(time, status), x=x,     fit.fun=fit.CoxBoost, args.fit=list(penalty=100),    complexity=complexity.mincv.CoxBoost, args.complexity=list(penalty=100),    indices=resample.indices(n=length(time), method=\"sub632\", sample.n=10),    args.aggregation=list(times=seq(0, quantile(time, probs=0.9), length.out=100)),    trace=TRUE, RNG=\"fixed\", seed=321) peperr.object3  # Diagnostic plots plot(peperr.object3)  # B: R is started sequential, desired cluster options are given as arguments # Example B1: # As example A1, but using a socket cluster and 3 CPUs peperr.object4 <- peperr(response=Surv(time, status), x=x,     fit.fun=fit.CoxBoost, complexity=c(50, 75),     indices=resample.indices(n=length(time), method=\"sub632\", sample.n=10),    parallel=TRUE, clustertype=\"SOCK\", cpus=3) } # }"},{"path":"https://fbertran.github.io/peperr/reference/perr.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction error estimates — perr","title":"Prediction error estimates — perr","text":"Extracts prediction error estimates peperr objects.","code":""},{"path":"https://fbertran.github.io/peperr/reference/perr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction error estimates — perr","text":"","code":"perr(peperrobject,      type = c(\"632p\", \"632\", \"apparent\", \"NoInf\", \"resample\", \"nullmodel\"))"},{"path":"https://fbertran.github.io/peperr/reference/perr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction error estimates — perr","text":"peperrobject peperr object obtained call function peperr. type \"632p\" .632+ prediction error estimate (default), \"632\" .632 prediction error estimate. \"apparent\", \"NoInf\", \"resample\" \"nullmodel\" return apparent error, -information error, mean sample error nullmodel fit, see Details.","code":""},{"path":"https://fbertran.github.io/peperr/reference/perr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction error estimates — perr","text":"type=\"632p\" type=\"632\": Prediction error: Matrix, one row per complexity value. type=\"apparent\": Apparent error full data set. Matrix: One row per complexity value. case survival response, columns correspond evaluation timepoints, given attribute addattr. type=\"NoInf\": -information error full data set, . e. evaluation permuted data. Matrix: One row per complexity value. Columns correspond evaluation timepoints, given attribute addattr. type=\"resample\": Matrix. Mean prediction error resampling test samples, one row per complexity value. type=\"nullmodel\": Vector scalar: Null model prediction error, .e. fit without information covariates. case survival response Kaplan-Meier estimate time point, response binary logistic regression model, else available.","code":""},{"path":"https://fbertran.github.io/peperr/reference/perr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction error estimates — perr","text":".632 .632+ prediction error estimates weighted combinations apparent error bootstrap cross-validation error estimate, survival data given time points.","code":""},{"path":"https://fbertran.github.io/peperr/reference/perr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prediction error estimates — perr","text":"Binder, H. Schumacher, M. (2008) Adapting prediction error estimates biased complexity selection high-dimensional bootstrap samples. Statistical Applications Genetics Molecular Biology, 7:1. Gerds, T. Schumacher, M. (2007) Efron-type measures prediction error survival analysis. Biometrics, 63, 1283–1287. Schumacher, M. Binder, H., Gerds, T. (2007) Assessment Survival Prediction Models High-Dimensional Settings. Bioinformatics, 23, 1768-1774.","code":""},{"path":[]},{"path":"https://fbertran.github.io/peperr/reference/perr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction error estimates — perr","text":"","code":"if (FALSE) { # \\dontrun{ n <- 200 p <- 100 beta <- c(rep(1,10),rep(0,p-10)) x <- matrix(rnorm(n*p),n,p) real.time <- -(log(runif(n)))/(10*exp(drop(x %*% beta))) cens.time <- rexp(n,rate=1/10) status <- ifelse(real.time <= cens.time,1,0) time <- ifelse(real.time <= cens.time,real.time,cens.time)  # Example: # Obtain prediction error estimate fitting a Cox proportional hazards model # using CoxBoost  # through 10 bootstrap samples  # with fixed complexity 50 and 75 # and aggregate using prediction error curves peperr.object <- peperr(response=Surv(time, status), x=x,     fit.fun=fit.CoxBoost, complexity=c(50, 75),     indices=resample.indices(n=length(time), method=\"sub632\", sample.n=10)) # 632+ estimate for both complexity values at each time point perr(peperr.object)  } # }"},{"path":"https://fbertran.github.io/peperr/reference/plot.peperr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for peperr object — plot.peperr","title":"Plot method for peperr object — plot.peperr","text":"Plots, allowing get first impression prediction error estimates check complexity selection bootstrap samples.","code":""},{"path":"https://fbertran.github.io/peperr/reference/plot.peperr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for peperr object — plot.peperr","text":"","code":"# S3 method for class 'peperr' plot(x, y, ...)"},{"path":"https://fbertran.github.io/peperr/reference/plot.peperr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for peperr object — plot.peperr","text":"x peperr object. y used. ... additional arguments, used.","code":""},{"path":"https://fbertran.github.io/peperr/reference/plot.peperr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot method for peperr object — plot.peperr","text":"plots provide simple fast overview results estimation prediction error resampling. plots shown depends complexity selected, .e., function passed peperr call complexity, explicitly passed. case survival response, prediction error curves shown. case binary response, one complexity value passed explicitly, plot available. Especially case complexity selected bootstrap sample, diagnostic plots help check whether resampling procedure works adequately detect specific problems due high-dimensional data structures.","code":""},{"path":"https://fbertran.github.io/peperr/reference/plot.peperr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for peperr object — plot.peperr","text":"","code":"if (FALSE) { # \\dontrun{ n <- 200 p <- 100 beta <- c(rep(1,10),rep(0,p-10)) x <- matrix(rnorm(n*p),n,p) real.time <- -(log(runif(n)))/(10*exp(drop(x %*% beta))) cens.time <- rexp(n,rate=1/10) status <- ifelse(real.time <= cens.time,1,0) time <- ifelse(real.time <= cens.time,real.time,cens.time)  peperr.object1 <- peperr(response=Surv(time, status), x=x,     fit.fun=fit.CoxBoost, complexity=c(50, 75),     indices=resample.indices(n=length(time), method=\"sub632\", sample.n=10)) plot(peperr.object1)  peperr.object2 <- peperr(response=Surv(time, status), x=x,     fit.fun=fit.CoxBoost, args.fit=list(penalty=100),    complexity=complexity.mincv.CoxBoost, args.complexity=list(penalty=100),    indices=resample.indices(n=length(time), method=\"sub632\", sample.n=10),    trace=TRUE) plot(peperr.object2)  peperr.object3 <- peperr(response=Surv(time, status), x=x,     fit.fun=fit.CoxBoost, args.fit=list(penalty=100),    complexity=complexity.mincv.CoxBoost, args.complexity=list(penalty=100),    indices=resample.indices(n=length(time), method=\"sub632\", sample.n=10),    args.aggregation=list(times=seq(0, quantile(time, probs=0.9), length.out=100)),    trace=TRUE) plot(peperr.object3) } # }"},{"path":"https://fbertran.github.io/peperr/reference/pmpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate prediction error curves — pmpec","title":"Calculate prediction error curves — pmpec","text":"Calculation prediction error curve survival response predicted probabilities survival.","code":""},{"path":"https://fbertran.github.io/peperr/reference/pmpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate prediction error curves — pmpec","text":"","code":"pmpec(object, response=NULL, x=NULL, times, model.args=NULL,      type=c(\"PErr\",\"NoInf\"), external.time=NULL, external.status=NULL,      data=NULL)"},{"path":"https://fbertran.github.io/peperr/reference/pmpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate prediction error curves — pmpec","text":"object fitted model class interface function predictProb.class available. response Either survival object (Surv(time, status), time n-vector censored survival times status n-vector containing event status, coded 0 1) matrix columns time containing survival times status containing integers, 0 indicates censoring, 1 interesting event larger numbers competing risks. x n*p matrix covariates. times vector time points prediction error estimated. model.args named list additional arguments, e.g. complexity value, passed predictProb function. type type output: Estimated prediction error (default) information error (prediction error obtained permuting data). external.time optional vector time points, used censoring distribution. external.status optional vector status values, used censoring distribution. data Data frame containing n-vector observed times ('time'), n-vector event status ('status') n*p matrix covariates (remaining entries). Alternatively response x, compatibility pec.","code":""},{"path":"https://fbertran.github.io/peperr/reference/pmpec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate prediction error curves — pmpec","text":"Vector prediction error estimates time point given time.","code":""},{"path":"https://fbertran.github.io/peperr/reference/pmpec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate prediction error curves — pmpec","text":"Prediction error survival data measured Brier score, considers squared difference true event status given time point predicted event status risk prediction model time. prediction error curve weighted mean Brier score function time time points times (see References). pmpec requires predictProb method class fitted model, .e. model class class predictProb.class. pmpec implemented behave similar function pec package pec, provides several predictProb methods. bootstrap framework, data contains part full data set. censoring distribution, full data used avoid extreme variance case small data sets. , observed times status values can passed argument external.time external.status.","code":""},{"path":[]},{"path":"https://fbertran.github.io/peperr/reference/pmpec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate prediction error curves — pmpec","text":"Harald Binder","code":""},{"path":"https://fbertran.github.io/peperr/reference/pmpec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate prediction error curves — pmpec","text":"Gerds, . Schumacher, M. (2006) Consistent estimation expected Brier score general survival models right-censored event times. Biometrical Journal, 48, 1029–1040. Schoop, R. (2008) Predictive accuracy failure time models longitudinal covariates. PhD thesis, University Freiburg.  http://www.freidok.uni-freiburg.de/volltexte/4995/.","code":""},{"path":"https://fbertran.github.io/peperr/reference/predictProb.coxph.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract predicted survival probabilities from a coxph object — predictProb.coxph","title":"Extract predicted survival probabilities from a coxph object — predictProb.coxph","text":"Extracts predicted survival probabilities survival models fitted Cox proportional hazards model, providing interface required pmpec.","code":""},{"path":"https://fbertran.github.io/peperr/reference/predictProb.coxph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract predicted survival probabilities from a coxph object — predictProb.coxph","text":"","code":"# S3 method for class 'coxph' predictProb(object, response, x, times, ...)"},{"path":"https://fbertran.github.io/peperr/reference/predictProb.coxph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract predicted survival probabilities from a coxph object — predictProb.coxph","text":"object fitted model class coxph. response survival object (Surv(time, status), time n-vector censored survival times status n-vector containing survival status, coded 0 1. x n*p matrix covariates. times vector evaluation time points. ... additional arguments, currently used.","code":""},{"path":"https://fbertran.github.io/peperr/reference/predictProb.coxph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract predicted survival probabilities from a coxph object — predictProb.coxph","text":"Matrix probabilities evaluation time point times(columns) new observation (rows).","code":""},{"path":"https://fbertran.github.io/peperr/reference/predictProb.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic function for extracting predicted survival probabilities — predictProb","title":"Generic function for extracting predicted survival probabilities — predictProb","text":"Generic function extraction predicted survival probabilities fitted survival model conforming interface required pmpec.","code":""},{"path":"https://fbertran.github.io/peperr/reference/predictProb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic function for extracting predicted survival probabilities — predictProb","text":"","code":"predictProb(object, response, x, ...)"},{"path":"https://fbertran.github.io/peperr/reference/predictProb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic function for extracting predicted survival probabilities — predictProb","text":"object fitted survival model. response Either survival object (Surv(time, status), time n-vector censored survival times status n-vector containing event status, coded 0 1) matrix columns time containing survival times status containing integers, 0 indicates censoring, 1 interesting event larger numbers competing risks. case binary response, vector entries 0 1. x n*p matrix covariates. ... additional arguments, example model complexity , case survival response, argument times, vector containing evaluation times.","code":""},{"path":"https://fbertran.github.io/peperr/reference/predictProb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generic function for extracting predicted survival probabilities — predictProb","text":"pmpec requires predictProb.class function model fit class class. extracts predicted probability survival model. See existing predictProb functions, time predictProb.CoxBoost, predictProb.coxph predictProb.survfit. desired predictProb function class class available peperr, implemented package pec predictSurvProb.class, can easily transformed predictProb method.","code":""},{"path":"https://fbertran.github.io/peperr/reference/predictProb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic function for extracting predicted survival probabilities — predictProb","text":"Matrix predicted probabilities evaluation time point times (columns) new observation (rows).","code":""},{"path":"https://fbertran.github.io/peperr/reference/predictProb.survfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract predicted survival probabilities from a survfit object — predictProb.survfit","title":"Extract predicted survival probabilities from a survfit object — predictProb.survfit","text":"Extracts predicted survival probabilities survival models fitted survfit, providing interface required pmpec.","code":""},{"path":"https://fbertran.github.io/peperr/reference/predictProb.survfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract predicted survival probabilities from a survfit object — predictProb.survfit","text":"","code":"# S3 method for class 'survfit' predictProb(object, response, x, times, train.data, ...)"},{"path":"https://fbertran.github.io/peperr/reference/predictProb.survfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract predicted survival probabilities from a survfit object — predictProb.survfit","text":"object fitted model class survfit. response survival object (Surv(time, status), time n-vector censored survival times status n-vector containing survival status, coded 0 1. x n*p matrix covariates. times vector evaluation time points. train.data used. ... additional arguments, currently used.","code":""},{"path":"https://fbertran.github.io/peperr/reference/predictProb.survfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract predicted survival probabilities from a survfit object — predictProb.survfit","text":"Matrix probabilities evaluation time point times(columns) new observation (rows).","code":""},{"path":"https://fbertran.github.io/peperr/reference/resample.indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Generation of indices for resampling Procedure — resample.indices","title":"Generation of indices for resampling Procedure — resample.indices","text":"Generates training test set indices use resampling estimation prediction error, e.g. cross-validation bootstrap (without replacement).","code":""},{"path":"https://fbertran.github.io/peperr/reference/resample.indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generation of indices for resampling Procedure — resample.indices","text":"","code":"resample.indices(n, sample.n = 100, method = c(\"no\", \"cv\" ,\"boot\", \"sub632\"))"},{"path":"https://fbertran.github.io/peperr/reference/resample.indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generation of indices for resampling Procedure — resample.indices","text":"n number observations full data set. sample.n number bootstrap samples case method=\"boot\" number cross-validation subsets case method=\"cv\", e.g. 10 10-fold cross-validation. considered method=\"\", number samples one (full data set) definition. method default, training set indices test set indices, .e. model assessed data fitted (\"\"). \"cv\": Cross-validation, \"boot\": Bootstrap (replacement), \"sub632\": Boostrap without replacement, also called subsampling. latter case, number observations sample equals round(0.632 * n), see Details.","code":""},{"path":"https://fbertran.github.io/peperr/reference/resample.indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generation of indices for resampling Procedure — resample.indices","text":"list containing two lists length sample.n: sample.index contains element indices observations one training set. ..sample contains element indices observations one test set, corresponding training set listelement sample.index.","code":""},{"path":"https://fbertran.github.io/peperr/reference/resample.indices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generation of indices for resampling Procedure — resample.indices","text":"bootstrap sample taken new data, complexity selection carried bootstrap sample. Binder Schumacher show bootstrap samples drawn replacement, often complex models obtained high-dimensional data settings. recommend draw bootstrap samples without replacement, size round(0.632 * n), equals expected number unique observations one bootstrap sample drawn replacement, avoid biased complexity selection improve predictive power resulting models.","code":""},{"path":"https://fbertran.github.io/peperr/reference/resample.indices.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generation of indices for resampling Procedure — resample.indices","text":"Binder, H. Schumacher, M. (2008) Adapting prediction error estimates biased complexity selection high-dimensional bootstrap samples. Statistical Applications Genetics Molecular Biology, 7:1.","code":""},{"path":[]},{"path":"https://fbertran.github.io/peperr/reference/resample.indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generation of indices for resampling Procedure — resample.indices","text":"","code":"# generate dataset: 100 patients, 20 covariates data <- matrix(rnorm(2000), nrow=100)  # generate indices for training and test data for 10-fold cross-validation indices <- resample.indices(n=100, sample.n = 10, method = \"cv\")  # create training and test data via indices trainingsample1 <- data[indices$sample.index[[1]],] testsample1 <- data[indices$not.in.sample[[1]],]"},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-16","dir":"Changelog","previous_headings":"","what":"peperr 1.6","title":"peperr 1.6","text":"Maintainer email update Added unit tests Fix package get rid CRAN check notes","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-15","dir":"Changelog","previous_headings":"","what":"peperr 1.5","title":"peperr 1.5","text":"CRAN release: 2023-03-22 Code update fix CRAN issues.","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-14","dir":"Changelog","previous_headings":"","what":"peperr 1.4","title":"peperr 1.4","text":"CRAN release: 2022-03-03 Code update.","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-13","dir":"Changelog","previous_headings":"","what":"peperr 1.3","title":"peperr 1.3","text":"CRAN release: 2021-03-16 Added github actions, pkgdown site, readme.Rmd package logo.","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-12","dir":"Changelog","previous_headings":"","what":"peperr 1.2","title":"peperr 1.2","text":"CRAN release: 2021-02-27 Suggestion package CoxBoost corresponding functions removed, package archived.","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-11-7","dir":"Changelog","previous_headings":"","what":"peperr 1.1-7","title":"peperr 1.1-7","text":"CRAN release: 2013-04-08 Suggestion package randomSurvivalForest resolved, package archived.","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-11-6","dir":"Changelog","previous_headings":"","what":"peperr 1.1-6","title":"peperr 1.1-6","text":"CRAN release: 2011-03-16 bug concerning weighting censored competing risks situation function pmpec() fixed","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-11-5","dir":"Changelog","previous_headings":"","what":"peperr 1.1-5","title":"peperr 1.1-5","text":"CRAN release: 2010-01-22 Bug function pmpec() fixed (error message argument type=“NoInf”)","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-11-4","dir":"Changelog","previous_headings":"","what":"peperr 1.1-4","title":"peperr 1.1-4","text":"CRAN release: 2009-09-28 New peperr() arguments ‘sr’, ‘sr.name’ ‘sr.restore’ allow restoring previously saved results Incorporation interface package randomSurvivalForest: Functions fit.rsf_mtry, complexity.ipec.rsf_mtry allow selection number candidate values node IPEC","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-11-3","dir":"Changelog","previous_headings":"","what":"peperr 1.1-3","title":"peperr 1.1-3","text":"CRAN release: 2009-04-23 New function ipec(), caclulate integrated prediction error curve survival data","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-11-2","dir":"Changelog","previous_headings":"","what":"peperr 1.1-2","title":"peperr 1.1-2","text":"CRAN release: 2009-01-22 Default value peperr argument RNG changed ‘RNGstream’ New peperr() argument lb, choose computation slaves executed load balanced","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-11-1","dir":"Changelog","previous_headings":"","what":"peperr 1.1-1","title":"peperr 1.1-1","text":"CRAN release: 2008-12-18 Independent parallel random number streams integrated -> new peperr() argument RNG peperr_1.1.tar.gz contained peperr_1.0-3.tar.gz mistake plot.peperr() now works non-integer complexity values well","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-11","dir":"Changelog","previous_headings":"","what":"peperr 1.1","title":"peperr 1.1","text":"CRAN release: 2008-10-28 New arguments function peperr() ‘clustertype’, specify type cluster used (‘SOCK’ socket, ‘MPI’, ‘PVM’ ‘NWS’) ‘clusterhosts’, specifies host list socket clusters, ‘clustertype=SOCK’ ‘clustertype=NWS’. Function extract.fun() returns additional list element ‘variables’, containing global variables required computation cluster nodes. Default argument ‘parallel’ function peperr() changed ‘FALSE’ ‘NULL’. fixed bug switching parallel sequential execution possible, affecting cases.","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-10-3","dir":"Changelog","previous_headings":"","what":"peperr 1.0-3","title":"peperr 1.0-3","text":"CRAN release: 2008-09-02 New argument ‘seed’ function peperr(), allow reproducibility parallel execution","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-10-2","dir":"Changelog","previous_headings":"","what":"peperr 1.0-2","title":"peperr 1.0-2","text":"CRAN release: 2008-08-07 Bug fixed occurred competing risks setting","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-10-1","dir":"Changelog","previous_headings":"","what":"peperr 1.0-1","title":"peperr 1.0-1","text":"CRAN release: 2008-07-29 predictProb() functions require arguments ‘response’ ‘x’ instead ‘data’","code":""},{"path":"https://fbertran.github.io/peperr/news/index.html","id":"peperr-10","dir":"Changelog","previous_headings":"","what":"peperr 1.0","title":"peperr 1.0","text":"CRAN release: 2008-07-16 initial public release","code":""}]
